input {
	#Input file
	file {
		type => "log_compare"
		path => ["/var/opt/hosting/log/apache2/diff_compare.txt"]
		start_position => "beginning"
	}
}

filter {

	#Check that the message is a json
	grok {
		match => { "message" => "{%{GREEDYDATA:json_message}}" }
		add_tag => "json"
	}

	if "json" in [tags]{
		#Parse the message if correct json
		json {
			source => "message"
		}
	}else{
		#We might be in the syslog case then check
		grok {
			match => { "message" => "%{SYSLOGBASE} %{GREEDYDATA:syslog_message}" }
		}
		#Once again validation
		grok {
			match => { "syslog_message" => "{%{GREEDYDATA:json_message}}" }
			add_tag => "json"
		}
		#Parse json 
		json {
			source => "syslog_message"
		}
		#Remove original entry
		mutate {
			remove_field => "syslog_message"
		}
	}

	#Remove original entry
	mutate {
		remove_field => ["json_message","message"]
	}

	#If an ip is present in the header we try to localize it
	if [request][header][CLIENT-IP]{
		mutate {
			add_tag => "HasIP"
		}
		
		geoip {
			add_tag => "GeoIP"
			database => "/home/dumbo/log_compare/GeoLiteCity.dat"
			source => "[request][header][CLIENT-IP]"
		}
	}
	
	#We split the request args infos per comma to ease the elasticsearch mapping
	if [request][args][INFOS]{
		mutate {
			split=> ["[request][args][INFOS]",","]
		}
	}
}

#Write in ES
output {
	elasticsearch {
		host => "localhost"
		protocol => "http"
		flush_size => 10
		workers => 5
	}
}