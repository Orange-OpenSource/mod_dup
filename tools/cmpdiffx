#! /usr/bin/python
import sys
import re


#
# UTILS FUNCTIONS
#
def regexMatch(block, regexs):
	return (re.search(regexs,block) != None)

def keepRegexMatch(block, regexs):
	return not regexMatch(block, regexs)

FilenameTohandler = dict()
def splitBy(block, regexs):
	global FilenameTohandler
	m = re.search(regexs, block)
	filename = m.group(1)+'.log' if m else 'others.log'
	if filename not in FilenameTohandler:
		FilenameTohandler[filename] = open(filename, 'a+')
	FilenameTohandler[filename].write(block)
	return True

def respTime(block, value, inf_or_sup):
	# inf_or_sup is a boolean, if true then it's sup
	m = re.search('Elapsed time for requests \(ms\): DUP ([0-9]+|N\/A) COMP ([0-9]+) DIFF', block)
	if m != None:
		# if N/A is matched for DUP value
		if m.group(1) == "N/A":
			return False
		valueDUP  = int(m.group(1))
		valueCOMP = int(m.group(2))
	else:
		return False # info not present
	# test if rule is sup or inf
	if inf_or_sup:
		# in this case compare >
		return True if ((valueDUP > value) or (valueCOMP > value)) else False
	else:
		# in this case compare <
		return True if ((valueDUP < value) and (valueCOMP < value)) else False

def respTimeDiff(block, value, inf_or_sup):
	# inf_or_sup is a boolean, if true then it's sup
	m = re.search('Elapsed time for requests \(ms\): DUP (?:[0-9]+|N\/A) COMP [0-9]+ DIFF (-?[0-9]+|N\/A)', block)
	if m != None:
		# if header ELAPSED_TIME_BY_DUP does not exist
		if m.group(1) == "N/A":
			return False
		valueDIFF  = abs(int(m.group(1)))
	else:
		return False # info not present
	# test if rule is sup or inf
	if inf_or_sup:
		# in this case compare >
		return True if (valueDIFF > value) else False
	else:
		# in this case compare <
		return True if (valueDIFF < value) else False


#
# parse command line, return a function handler to pass the diff block to
#
def parseCommandLine():
	if len(sys.argv) < 3:
		sys.stderr.write("Usage: cmpdiffx <log file> <rule>\n")
		sys.stderr.write("Example: cmpdiffx mylogfile.log 'match=RegexToMatch'\n")
		sys.stderr.write("Example: cmpdiffx mylogfile.log 'keepmatch=RegexToMatch'\n")
		sys.stderr.write("Example: cmpdiffx mylogfile.log 'resptime(< or >)<timeout>'\n")
		sys.stderr.write("Example: cmpdiffx mylogfile.log 'dresptime(< or >)<difftime>'\n")
		sys.stderr.write("Example: cmpdiffx mylogfile.log 'split=sid\=(.{6})'     ### do not forget to truncate/remove previous output log files before launching script\n")
		sys.stderr.write("Do not forget the quotes '' for the rule\n")
		exit(1)
	m = re.search('^keepmatch *= *(.*)$', sys.argv[2])
	if m: return lambda block: keepRegexMatch(block, m.group(1))
	# case where rule is match=smth
	m = re.search('^match *= *(.*)$', sys.argv[2])
	if m: return lambda block: regexMatch(block, m.group(1))
	# case where rule is resptime(< or >)value
	m = re.search('^resptime *([\>\<]) *([0-9]+)$', sys.argv[2])
	if m: return lambda block: respTime(block, int(m.group(2)), True if (m.group(1) == '>') else False)
	# case where rule is dresptime(< or >)value
	m = re.search('^dresptime *([\>\<]) *([0-9]+)$', sys.argv[2])
	if m: return lambda block: respTimeDiff(block, int(m.group(2)), True if (m.group(1) == '>') else False)
	# case where rule is split=smth
	m = re.search('^split *= *(.*)$', sys.argv[2])
	if m: return lambda block: splitBy(block, m.group(1))
	# if control arrives here, then it's an invalid rule
	sys.stderr.write("Failed to parse rule")
	exit(1)

	
#
# main
#
def main():
	handler=parseCommandLine()

	diffBlock = str()

	# parse file line by line
	with open(sys.argv[1],'r') as f:

		for line in f:

			if "BEGIN NEW REQUEST DIFFERENCE" in line:
				# reset diffBlock to first line (BEGIN NEW...)
				diffBlock = line
			elif "END DIFFERENCE" in line:
				# add last line (END DIFFERENCE...)
				diffBlock += line
				#process full block here
				if not handler(diffBlock):
					print(diffBlock)
				#end processing
			else:
				diffBlock += line

main()

# close file handlers opened by splitBy
for key in FilenameTohandler:
	FilenameTohandler[key].close()
