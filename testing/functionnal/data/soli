<?xml version="1.0" encoding="UTF-8"?>
<SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ns1="http://com.francetelecom.pns.enabler.sei.eto/PnSEnabler/V1" xmlns:ns2="http://com.francetelecom.pns.enabler.sei/PnSEnabler/V1/PnSCoreSEI"><SOAP-ENV:Body><ns2:getPNSResponse><ns2:getPNSReturn><ns2:Process><ns1:Status>OK</ns1:Status><ns1:ElapseTime>0.073872089385986</ns1:ElapseTime></ns2:Process><ns2:Data><ns1:CoreData><ns1:HomeAddress><ns1:Street1>XLL 599 XXX X 55  p Xspmje T'Kerjzezsxp</ns1:Street1><ns1:Street2></ns1:Street2><ns1:ZipCode>33359</ns1:ZipCode><ns1:City>LKXTKT</ns1:City><ns1:State></ns1:State><ns1:Country>FR</ns1:Country></ns1:HomeAddress><ns1:MobileDeviceTac></ns1:MobileDeviceTac></ns1:CoreData><ns1:NextECareData><ns1:Extension><ns2:FullCompositeOfferSummary></ns2:FullCompositeOfferSummary></ns1:Extension></ns1:NextECareData></ns2:Data></ns2:getPNSReturn></ns2:getPNSResponse></SOAP-ENV:Body></SOAP-ENV:Envelope>